<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.mypro.dao.FriendsMapper">
    <resultMap id="BaseResultMap" type="org.mypro.entity.Friends">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="user" jdbcType="VARCHAR" property="user"/>
        <result column="userid" jdbcType="INTEGER" property="userid"/>
        <result column="mingzi" jdbcType="VARCHAR" property="mingzi"/>
        <result column="category" jdbcType="VARCHAR" property="category"/>
        <result column="categoryid" jdbcType="INTEGER" property="categoryid"/>
        <result column="state" jdbcType="VARCHAR" property="state"/>
    </resultMap>
    <sql id="Example_Where_Clause">
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Update_By_Example_Where_Clause">
        <where>
            <foreach collection="example.oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="("
                                             separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>
    <sql id="Base_Column_List">
    id, user, userid, mingzi, category, categoryid, state
  </sql>
    <select id="selectByExample" parameterType="org.mypro.entity.FriendsExample" resultMap="BaseResultMap">
        select
        <if test="distinct">
            distinct
        </if>
        <include refid="Base_Column_List"/>
        from t_friends
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
        <if test="orderByClause != null">
            order by ${orderByClause}
        </if>
    </select>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from t_friends
        where id = #{id,jdbcType=INTEGER}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from t_friends
    where id = #{id,jdbcType=INTEGER}
  </delete>
    <delete id="deleteByExample" parameterType="org.mypro.entity.FriendsExample">
        delete from t_friends
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </delete>
    <insert id="insert" parameterType="org.mypro.entity.Friends">
    insert into t_friends (id, user, userid, 
      mingzi, category, categoryid, 
      state)
    values (#{id,jdbcType=INTEGER}, #{user,jdbcType=VARCHAR}, #{userid,jdbcType=INTEGER}, 
      #{mingzi,jdbcType=VARCHAR}, #{category,jdbcType=VARCHAR}, #{categoryid,jdbcType=INTEGER}, 
      #{state,jdbcType=VARCHAR})
  </insert>
    <insert id="insertSelective" parameterType="org.mypro.entity.Friends">
        insert into t_friends
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="user != null">
                user,
            </if>
            <if test="userid != null">
                userid,
            </if>
            <if test="mingzi != null">
                mingzi,
            </if>
            <if test="category != null">
                category,
            </if>
            <if test="categoryid != null">
                categoryid,
            </if>
            <if test="state != null">
                state,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="user != null">
                #{user,jdbcType=VARCHAR},
            </if>
            <if test="userid != null">
                #{userid,jdbcType=INTEGER},
            </if>
            <if test="mingzi != null">
                #{mingzi,jdbcType=VARCHAR},
            </if>
            <if test="category != null">
                #{category,jdbcType=VARCHAR},
            </if>
            <if test="categoryid != null">
                #{categoryid,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                #{state,jdbcType=VARCHAR},
            </if>
        </trim>
    </insert>
    <select id="countByExample" parameterType="org.mypro.entity.FriendsExample" resultType="java.lang.Long">
        select count(*) from t_friends
        <if test="_parameter != null">
            <include refid="Example_Where_Clause"/>
        </if>
    </select>
    <update id="updateByExampleSelective" parameterType="map">
        update t_friends
        <set>
            <if test="record.id != null">
                id = #{record.id,jdbcType=INTEGER},
            </if>
            <if test="record.user != null">
                user = #{record.user,jdbcType=VARCHAR},
            </if>
            <if test="record.userid != null">
                userid = #{record.userid,jdbcType=INTEGER},
            </if>
            <if test="record.mingzi != null">
                mingzi = #{record.mingzi,jdbcType=VARCHAR},
            </if>
            <if test="record.category != null">
                category = #{record.category,jdbcType=VARCHAR},
            </if>
            <if test="record.categoryid != null">
                categoryid = #{record.categoryid,jdbcType=INTEGER},
            </if>
            <if test="record.state != null">
                state = #{record.state,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByExample" parameterType="map">
        update t_friends
        set id = #{record.id,jdbcType=INTEGER},
        user = #{record.user,jdbcType=VARCHAR},
        userid = #{record.userid,jdbcType=INTEGER},
        mingzi = #{record.mingzi,jdbcType=VARCHAR},
        category = #{record.category,jdbcType=VARCHAR},
        categoryid = #{record.categoryid,jdbcType=INTEGER},
        state = #{record.state,jdbcType=VARCHAR}
        <if test="_parameter != null">
            <include refid="Update_By_Example_Where_Clause"/>
        </if>
    </update>
    <update id="updateByPrimaryKeySelective" parameterType="org.mypro.entity.Friends">
        update t_friends
        <set>
            <if test="user != null">
                user = #{user,jdbcType=VARCHAR},
            </if>
            <if test="userid != null">
                userid = #{userid,jdbcType=INTEGER},
            </if>
            <if test="mingzi != null">
                mingzi = #{mingzi,jdbcType=VARCHAR},
            </if>
            <if test="category != null">
                category = #{category,jdbcType=VARCHAR},
            </if>
            <if test="categoryid != null">
                categoryid = #{categoryid,jdbcType=INTEGER},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="updateByPrimaryKey" parameterType="org.mypro.entity.Friends">
    update t_friends
    set user = #{user,jdbcType=VARCHAR},
      userid = #{userid,jdbcType=INTEGER},
      mingzi = #{mingzi,jdbcType=VARCHAR},
      category = #{category,jdbcType=VARCHAR},
      categoryid = #{categoryid,jdbcType=INTEGER},
      state = #{state,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>